#include <esp_system.h>
#include "freertos/FreeRTOS.h"
#include "freertos/portmacro.h"
#include "esp_attr.h"
#include "u8g2_esp32_hal.h"
#include "u8g2.h"
#ifndef DISPLAY_H
#define DISPLAY_H

static void (*volatile previously_displayed)(void) = NULL;
static portMUX_TYPE display_mux = portMUX_INITIALIZER_UNLOCKED;
static SemaphoreHandle_t display_mutex = NULL;

void u8g2_init_display();
static void add_head(u8g2_t *u8g2);
void draw_measurement();
void update_measurement(uint16_t new_systole, uint16_t new_diastole, uint16_t new_pulse, bool new_arrhythmia);
void update_display();
void task_blink_warn();
void draw_main();
char (*three_digit_handle(uint16_t value))[2];
void draw_error();
void draw_no_measurement();
void draw_measuring();
void task_snake();
void task_init();
void draw_ota(char partition_name[8], uint8_t progress_percent, char info[25]);

static uint16_t systole = 0;
static uint16_t diastole = 0;
static uint16_t pulse = 0;
static bool arrhythmia = false;
static uint16_t map = 0;
static bool warning = false;

// Limits
static uint16_t map_v0 = 60;  // start scale; < map_v0 hypotension, show warning
static uint16_t map_v1 = 101; // elevated; >=map_v1 && < map_v3 show warning
static uint16_t map_v2 = 111; // high
static uint16_t map_v3 = 121; // super high; >=map_v3 show warning fast blinking
static uint16_t map_v4 = 140; // end scale

static const uint8_t image_cards_hearts_bits[] = {0x00, 0x00, 0x00, 0x00, 0x1c, 0x1c, 0x3e, 0x3e, 0x7f, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xff, 0x7f, 0xfe, 0x3f, 0xfc, 0x1f, 0xf8, 0x0f, 0xf0, 0x07, 0xe0, 0x03, 0xc0, 0x01, 0x80, 0x00, 0x00, 0x00};
static const uint8_t image_Layer_27_bits[] = {};
static const uint8_t image_Layer_31_bits[] = {0xe0, 0x03, 0x18, 0x0c, 0xc4, 0x11, 0x32, 0x26, 0x89, 0x48, 0x64, 0x13, 0x10, 0x04, 0x80, 0x00, 0x40, 0x01, 0x80, 0x00};
static const uint8_t image_Layer_32_bits[] = {0x10, 0x29, 0x4a, 0x2c, 0x18, 0x18, 0x2c, 0x4a, 0x29, 0x10};
static const uint8_t image_Layer_34_1_bits[] = {0xf0, 0x80, 0x07, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, 0x00, 0x64, 0x00, 0x13, 0x00, 0x00, 0x12, 0x00, 0x24, 0x00, 0x00, 0x09, 0x00, 0x48, 0x00, 0x00, 0x05, 0x00, 0x50, 0x00, 0x00, 0x05, 0x00, 0x50, 0x00, 0x00, 0x01, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x0a, 0x00, 0x00, 0x00, 0x28, 0x0a, 0x02, 0x00, 0x00, 0x47, 0x11, 0x1d, 0x00, 0x00, 0x40, 0xa1, 0x00, 0x00, 0x00, 0x80, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00};
static const uint8_t image_Layer_34_bits[] = {0xff, 0x03, 0xff, 0x03, 0xff, 0x03, 0xff, 0x03, 0xfe, 0x01, 0xfe, 0x01, 0xfe, 0x01, 0xfc, 0x00, 0xfc, 0x00, 0xfc, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x00, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00, 0x78, 0x00};
static const uint8_t image_Layer_35_bits[] = {0xff, 0xff, 0xff, 0x3f, 0x00, 0x02, 0x81, 0x00, 0x01, 0x02, 0x81, 0x28, 0x01, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x28};
static const uint8_t image_Layer_37_bits[] = {0x04, 0x04, 0x15, 0x0e, 0x04};
static const uint8_t image_Layer_41_bits[] = {0x01, 0x02, 0x02, 0x01, 0x02, 0x01, 0x01, 0x02};
static const uint8_t image_menu_settings_gear_bits[] = {0xc0, 0x03, 0x48, 0x12, 0x34, 0x2c, 0x02, 0x40, 0xc4, 0x23, 0x24, 0x24, 0x13, 0xc8, 0x11, 0x88, 0x11, 0x88, 0x13, 0xc8, 0x24, 0x24, 0xc4, 0x23, 0x02, 0x40, 0x34, 0x2c, 0x48, 0x12, 0xc0, 0x03};
static const uint8_t image_operation_undo_bits[] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x01, 0x0b, 0x02, 0x07, 0x04, 0x0f, 0x08, 0x1f, 0x08, 0x00, 0x08, 0x00, 0x08, 0x00, 0x08, 0x04, 0x04, 0x08, 0x02, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00};
static const uint8_t image_welcome_bits[] = {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x1f,0xc0,0x0f,0x00,0x00,0x00,0xf0,0x7f,0xf8,0x7f,0x00,0x00,0x00,0x78,0xe0,0x38,0xf0,0x00,0x00,0x00,0x3c,0xc0,0x1b,0xe0,0x01,0x00,0x00,0x1c,0x80,0x0f,0x80,0x01,0x00,0x00,0x0e,0x00,0x07,0x00,0x03,0x00,0x00,0x0e,0x00,0x00,0x00,0x03,0x00,0x00,0x0e,0x30,0x00,0x20,0x03,0x00,0x00,0x0e,0x72,0x40,0x00,0x03,0x00,0x00,0x0e,0x78,0x70,0x00,0x03,0x00,0x00,0x0e,0xd8,0xe0,0x00,0x03,0x00,0x00,0xdc,0xcf,0xb8,0xdf,0x01,0x00,0x00,0xdc,0x8f,0xbb,0xdf,0x01,0x00,0x00,0x38,0x80,0x1f,0xe0,0xff,0x07,0xf0,0x63,0x00,0x1f,0xf0,0xff,0x07,0xf8,0xcf,0x00,0x0f,0x78,0x00,0x1c,0x9e,0x9e,0x01,0x0e,0x3c,0x00,0x1e,0x0e,0xbc,0x03,0x00,0x3e,0x00,0x16,0x06,0x39,0x07,0x00,0x37,0x00,0x16,0x86,0x39,0x0c,0x80,0x33,0x00,0x16,0xce,0x3c,0x1c,0xc0,0x31,0x00,0x16,0xc6,0x38,0x38,0xe0,0x30,0x00,0x16,0x06,0xf8,0x7f,0x70,0x30,0x00,0x16,0x0e,0x3c,0xe0,0x38,0x30,0x00,0x16,0x1c,0x1e,0xc0,0x1f,0x30,0x00,0x16,0xf8,0x0f,0x80,0x0f,0x30,0x00,0x16,0xf0,0x03,0x00,0x0f,0x30,0x00,0x1e,0x40,0x00,0x00,0xfa,0x7f,0x00,0x1c,0x00,0x00,0x00,0xf0,0xef,0xff,0x07,0x00,0x00,0x00,0x00,0xe8,0xff,0x07,0x00,0x00,0x00,0x00,0xe0,0xff,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00};

// Snake
static void draw_snake(u8g2_t *u8g2);

typedef enum { DIR_RIGHT=0, DIR_DOWN, DIR_LEFT, DIR_UP } Dir;
typedef struct { uint8_t x, y; Dir dir; } SnakePoint;
static const SnakePoint snake_path[] = {
    {  6, 37, DIR_RIGHT },
    { 14, 37, DIR_RIGHT },
    { 20, 37, DIR_RIGHT },
    { 26, 37, DIR_RIGHT },
    { 32, 37, DIR_RIGHT },
    { 38, 37, DIR_RIGHT },
    { 44, 37, DIR_RIGHT },
    { 50, 37, DIR_RIGHT },
    { 56, 37, DIR_RIGHT },
    { 56, 45, DIR_DOWN  },
    { 56, 53, DIR_DOWN  },
    { 50, 53, DIR_LEFT  },
    { 44, 53, DIR_LEFT  },
    { 38, 53, DIR_LEFT  },
    { 32, 53, DIR_LEFT  },
    { 26, 53, DIR_LEFT  },
    { 20, 53, DIR_LEFT  },
    { 14, 53, DIR_LEFT  },
    {  6, 53, DIR_LEFT  },
    {  6, 45, DIR_UP    }
};
static const int SNAKE_PATH_LEN = sizeof(snake_path)/sizeof(snake_path[0]);
static int  snake_head_idx     = 0;
static bool snake_wiggle       = true;
static uint8_t snake_body_sections = 4;

// Body bitmaps (RIGHT, DOWN, LEFT, UP)
static const uint8_t *body_bm[4] = {
    (const uint8_t[]){ 0x0e, 0x19, 0x17, 0x19, 0x0e }, // RIGHT
    (const uint8_t[]){ 0x0e, 0x15, 0x15, 0x1b, 0x0e }, // DOWN
    (const uint8_t[]){ 0x0e, 0x13, 0x1d, 0x13, 0x0e }, // LEFT
    (const uint8_t[]){ 0x0e, 0x1b, 0x15, 0x15, 0x0e }  // UP
};

// Head bitmaps (RIGHT, DOWN, LEFT, UP)
static const uint8_t *head_bm[4] = {
    (const uint8_t[]){ 0x1c, 0x23, 0x51, 0x41, 0x51, 0x23, 0x1c }, // RIGHT
    (const uint8_t[]){ 0x3e, 0x22, 0x41, 0x41, 0x55, 0x22, 0x1c }, // DOWN
    (const uint8_t[]){ 0x1c, 0x62, 0x45, 0x41, 0x45, 0x62, 0x1c }, // LEFT
    (const uint8_t[]){ 0x1c, 0x22, 0x55, 0x41, 0x41, 0x22, 0x3e }  // UP
};

// Tail bitmaps (RIGHT, DOWN, LEFT, UP)
static const uint8_t *tail_bm[4] = {
    (const uint8_t[]){ 0x0c, 0x12, 0x11, 0x12, 0x0c }, // RIGHT
    (const uint8_t[]){ 0x04, 0x0a, 0x11, 0x11, 0x0e }, // DOWN
    (const uint8_t[]){ 0x06, 0x09, 0x11, 0x09, 0x06 }, // LEFT
    (const uint8_t[]){ 0x0e, 0x11, 0x11, 0x0a, 0x04 }  // UP
};

#endif